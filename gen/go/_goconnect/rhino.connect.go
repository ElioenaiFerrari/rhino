// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rhino.proto

package _goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/ElioenaiFerrari/rhino/gen/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RhinoName is the fully-qualified name of the Rhino service.
	RhinoName = "rhino.Rhino"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RhinoSubscribeProcedure is the fully-qualified name of the Rhino's Subscribe RPC.
	RhinoSubscribeProcedure = "/rhino.Rhino/Subscribe"
	// RhinoAckProcedure is the fully-qualified name of the Rhino's Ack RPC.
	RhinoAckProcedure = "/rhino.Rhino/Ack"
	// RhinoPublishProcedure is the fully-qualified name of the Rhino's Publish RPC.
	RhinoPublishProcedure = "/rhino.Rhino/Publish"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	rhinoServiceDescriptor         = _go.File_rhino_proto.Services().ByName("Rhino")
	rhinoSubscribeMethodDescriptor = rhinoServiceDescriptor.Methods().ByName("Subscribe")
	rhinoAckMethodDescriptor       = rhinoServiceDescriptor.Methods().ByName("Ack")
	rhinoPublishMethodDescriptor   = rhinoServiceDescriptor.Methods().ByName("Publish")
)

// RhinoClient is a client for the rhino.Rhino service.
type RhinoClient interface {
	Subscribe(context.Context, *connect.Request[_go.SubscriptionRequest]) (*connect.ServerStreamForClient[_go.SubscriptionResponse], error)
	Ack(context.Context, *connect.Request[_go.AckRequest]) (*connect.Response[_go.AckResponse], error)
	Publish(context.Context, *connect.Request[_go.PublishRequest]) (*connect.Response[_go.PublishResponse], error)
}

// NewRhinoClient constructs a client for the rhino.Rhino service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRhinoClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RhinoClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rhinoClient{
		subscribe: connect.NewClient[_go.SubscriptionRequest, _go.SubscriptionResponse](
			httpClient,
			baseURL+RhinoSubscribeProcedure,
			connect.WithSchema(rhinoSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ack: connect.NewClient[_go.AckRequest, _go.AckResponse](
			httpClient,
			baseURL+RhinoAckProcedure,
			connect.WithSchema(rhinoAckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publish: connect.NewClient[_go.PublishRequest, _go.PublishResponse](
			httpClient,
			baseURL+RhinoPublishProcedure,
			connect.WithSchema(rhinoPublishMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// rhinoClient implements RhinoClient.
type rhinoClient struct {
	subscribe *connect.Client[_go.SubscriptionRequest, _go.SubscriptionResponse]
	ack       *connect.Client[_go.AckRequest, _go.AckResponse]
	publish   *connect.Client[_go.PublishRequest, _go.PublishResponse]
}

// Subscribe calls rhino.Rhino.Subscribe.
func (c *rhinoClient) Subscribe(ctx context.Context, req *connect.Request[_go.SubscriptionRequest]) (*connect.ServerStreamForClient[_go.SubscriptionResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// Ack calls rhino.Rhino.Ack.
func (c *rhinoClient) Ack(ctx context.Context, req *connect.Request[_go.AckRequest]) (*connect.Response[_go.AckResponse], error) {
	return c.ack.CallUnary(ctx, req)
}

// Publish calls rhino.Rhino.Publish.
func (c *rhinoClient) Publish(ctx context.Context, req *connect.Request[_go.PublishRequest]) (*connect.Response[_go.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// RhinoHandler is an implementation of the rhino.Rhino service.
type RhinoHandler interface {
	Subscribe(context.Context, *connect.Request[_go.SubscriptionRequest], *connect.ServerStream[_go.SubscriptionResponse]) error
	Ack(context.Context, *connect.Request[_go.AckRequest]) (*connect.Response[_go.AckResponse], error)
	Publish(context.Context, *connect.Request[_go.PublishRequest]) (*connect.Response[_go.PublishResponse], error)
}

// NewRhinoHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRhinoHandler(svc RhinoHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rhinoSubscribeHandler := connect.NewServerStreamHandler(
		RhinoSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(rhinoSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rhinoAckHandler := connect.NewUnaryHandler(
		RhinoAckProcedure,
		svc.Ack,
		connect.WithSchema(rhinoAckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rhinoPublishHandler := connect.NewUnaryHandler(
		RhinoPublishProcedure,
		svc.Publish,
		connect.WithSchema(rhinoPublishMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rhino.Rhino/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RhinoSubscribeProcedure:
			rhinoSubscribeHandler.ServeHTTP(w, r)
		case RhinoAckProcedure:
			rhinoAckHandler.ServeHTTP(w, r)
		case RhinoPublishProcedure:
			rhinoPublishHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRhinoHandler returns CodeUnimplemented from all methods.
type UnimplementedRhinoHandler struct{}

func (UnimplementedRhinoHandler) Subscribe(context.Context, *connect.Request[_go.SubscriptionRequest], *connect.ServerStream[_go.SubscriptionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("rhino.Rhino.Subscribe is not implemented"))
}

func (UnimplementedRhinoHandler) Ack(context.Context, *connect.Request[_go.AckRequest]) (*connect.Response[_go.AckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rhino.Rhino.Ack is not implemented"))
}

func (UnimplementedRhinoHandler) Publish(context.Context, *connect.Request[_go.PublishRequest]) (*connect.Response[_go.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rhino.Rhino.Publish is not implemented"))
}
